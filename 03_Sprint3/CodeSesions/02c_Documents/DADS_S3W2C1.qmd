---
title: Sprint 3 - Week 2 - Class 1
subtitle: Valores Duplicados, Ausentes y Filtrado
jupyter: python3
execute: 
  eval: true
  error: true
  warning: true
  include: false # false para versión del estudiante, true para versión del tutor
  output: true
code-line-numbers: true
format:
  html:
    theme: darkly
    self-contained: true
    toc: true
  pdf: 
    toc: true
  ipynb: default
editor: 
  markdown: 
    wrap: 72
---

# Contexto del problema

En este caso de estudio, vamos a analizar el comportamiento del ranking
FIFA desde que inició su medición en el año 1993, a fin de presentar al
público la situación y el rendimiento de las distintas selecciones
nacionales afiliadas.

En este contexto, nos interesa contestar entre otras las siguientes
preguntas:

-   ¿Cómo es el rendimiento histórico por confederación?
-   ¿Cómo ha sido el rendimiento histórico de su país comparado con el
    promedio de la confederación a la cual pertenece?
-   ¿Cuáles han sido históricamente los mejores países?
-   ¿Quienes han sido los top 5 países previo al inicio de cada mundial?
    ¿Entre estos países han estado los campeones del mundo
    correspondientes?
-   Según esta puntuación, ¿las selecciones son cada vez más
    competitivas o cada vez parece existir más diferencia a través del
    tiempo?

Con este propósito usted cuenta con un conjunto de datos en el archivo
`fifa_rank.csv` cuya metadata se detalla a continuación:

-   Fuente: FIFA Site 2018
-   Dimensiones:
    -   `Country`: Nombre del pais afiliado a la FIFA cuya selección de
        fútbol es puntuada
    -   `Confederation`: Confederación a la que pertenece de acuerdo a
        la división de la FIFA
    -   `Rank_Date`: Fecha de publicación del ranking FIFA entre marzo
        de 1993 y junio de 2018 (previo al mundial de Rusia)
    -   `Points_Old_Version`: Puntos obtenidos conforme el sistema
        antiguo de la FIFA (previo al año 2011)
    -   `Ponts_New_Version`: Puntos obtenidos conforme el sistema nuevo
        de la FIFA (a partir del años 2011)
    -   `rank`: Posición en el ranking oficial de la FIFA dados los
        puntos calculados

# Información importante sobre las preguntas

Las preguntas en este documento están hechas de forma ambigüa a propósito, para similar una situación real. Deberán interpretar las preguntas como estimen convenientes, discutirlas y resolverlas de la forma que les parezca más adecuada. 

Si hay algún término que no conocen o algo que no saben cómo hacer, búsquenlo en internet. Ese es un flujo de trabajo real.

# Cargar librerías y datos

```{python}
#| include: true
# Cargar librerias
import pandas as pd
import numpy as np
```

## Ajustar ruta relativa según contexto

```{python}
#| include: true
# Cargar datos
df_fifa = pd.read_csv("DA-DS/S3/W1/fifa_rank.csv", sep = ",")
```

# Diagnóstico inicial

```{python}
#| include: true
# Visualizar información general de los datos
df_fifa.info()
```

```{python}
#| include: true

# **CONCLUSIONES DE LA INFORMACION GENERAL DEL ARCHIVO:**
# 
# - Las dimensiones del dataframe son 57,797 registros (filas) y 6 columnas (campos)
# 
# - Los Nombres de las columnas no están bien presentados, en concreto "rank" esta en minúsculas y el resto no. Se debería estandarizar
# 
# - Las columnas Confederation, Points_Old_Version y Poins_New_Version tendrían valores perdidos
# 
# - La columna Poins_New_Version es de un tipo object (string) que no corresponde, debería cambiarse a float
# 
# - La columna rank date es de un tipo object (string) que no corresponde, debería ser de tipo fecha
```


```{python}
#| include: true
# Visualizar cabecera de los datos
df_fifa.head(n = 10)
```

```{python}
#| include: true
# Visualizar una muestra aleatoria de los datos
df_fifa.sample(n = 10)
```

```{python}
#| include: true

# **CONCLUSIONES DE LA VISUALIZACION**
# 
# - Se podria contar con campos adicionales de años y meses a partir de la fecha considerando que los datos son mensuales
# 
# - Se podria unificar los puntos antiguos y nuevos en una sola columna unificada
# 
# - Al existir demasiados datos se debería verificar la existencia de duplicados

```

# Procesamiento

## Ajustar nombres de columnas

-   Poner todos los nombres de columnas en minusculas

```{python}
#| include: true

col_originales = df_fifa.columns
col_nuevas = [col.lower() for col in col_originales]
df_fifa.columns = col_nuevas
```

```{python}
#| include: true

df_fifa.head(10)
```

## Visualizar datos en confederation

-   Visualizar cuantos casos hay por confederation

```{python}
#| include: true

# Visualizar cuantos casos por confederation
df_fifa.groupby('confederation', dropna=False)['country'].count()
```

```{python}
#| include: true

# **CONCLUSIONES**
# 
# - Es necesario sustituir los datos perdidos en esta variable por "OFC"

```

## Ajustar formato de columna rank_date

-   Cambiar a formato fecha

```{python}
#| include: true

df_fifa['rank_date'] = pd.to_datetime(df_fifa['rank_date'], infer_datetime_format=True)
```

```{python}
#| include: true

df_fifa.info()
```

## Adicionar columnas de año y mes

-   Crear campo `year`
-   Crear campo `month`
-   Cuantos casos hay por cada mes y año
-   Hacer un primer grafico considerando que existen demasiados casos

```{python}
#| include: true

# Campo year
df_fifa['year'] = pd.DatetimeIndex(df_fifa['rank_date']).year

# Campo month
df_fifa['month'] = pd.DatetimeIndex(df_fifa['rank_date']).month
```

```{python}
#| include: true

df_fifa.sample(10)
```

```{python}
#| include: true

# Visualizar cuantos casos hay por cada mes y año
df_fifa.groupby(['year','month'])['country'].count()
```

```{python}
#| include: true

# Hacer un primer grafico considerando que existen demasiados casos
df_grupos_meses = df_fifa.groupby(['year','month'])['country'].count()
df_grupos_meses.plot(
    kind="line",
    xlabel="Año, Mes",
    ylabel="# Paises",
    title="Cantidad de Paises Calificados"
)
```

```{python}
#| include: true

# **CONCLUSIONES**
# 
# - Va a ser necesario revisar los datos entre los años 2007 y 2011 pues parece que existen duplicados
```


## Visualizar datos en Points_Old_Version

-   Visualizar cuantos casos hay para cada valor posibles
-   Visualizar cuantos NA hay por año - mes

```{python}
#| include: true

# Visualizar cuantos casos
df_fifa['points_old_version'].value_counts(dropna=False)
```

```{python}
#| include: true

df_fifa[df_fifa['points_old_version'].isna()][['year','month']].value_counts().sort_index()
```

```{python}
#| include: true

# **CONCLUSIONES**
# 
# - Los valores perdidos corresponden a los años posteriores a 2011 donde se reformó la clasificacion
```


## Visualizar datos en Points_New_Version

-   Visualizar cuantos casos hay para cada valor posibles
-   Visualizar cuantos "no definidos" (ND) hay por año

```{python}
#| include: true

# Visualizar cuantos casos
df_fifa['points_new_version'].value_counts(dropna=False)
```

```{python}
#| include: true

df_fifa[df_fifa['points_new_version']== "ND"]['year'].value_counts().sort_index()
```

```{python}
#| include: true

# **Conclusiones**
# 
# - Se debería cambiar el "ND" por un valor perdido para hacer que esta variable sea numérica
# 
# - Idealmente se debería unir los puntos viejos y nuevos en una sola variable pues representan lo mismo
```




----------------


# Procesamiento 2

## E1: Ajustar valores perdidos para variables que correspondan

- Variable confederation
- Variable poins_new_version

```{python}
#| include: true
# 
```

```{python}

# Variable confederation

df_fifa['confederation'] = df_fifa['confederation'].fillna('OCF')

```

```{python}

df_fifa['confederation'].value_counts(dropna=False)

```

```{python}

# Variable poins_new_version

df_fifa.loc[df_fifa['points_new_version'] == 'ND','points_new_version'] = np.nan

```

```{python}

df_fifa['points_new_version'] = df_fifa['points_new_version'].astype(float)

```

```{python}

df_fifa.info()

```

## E2: Encontrar y dar tratamiento a duplicados globales

- Identificar duplicados globales
- Eliminar duplicados globales

```{python}
#| include: true
# 
```

```{python}

# Identificar duplicados globales

df_fifa.duplicated().sum()

```

```{python}

df_fifa[df_fifa.duplicated()]

```

```{python}

# Eliminar duplicados globales

df_fifa = df_fifa.drop_duplicates().reset_index(drop=True)

```

```{python}

df_fifa.info()

```

## E3: Encontrar y dar tratamiento a duplicados implícitos

- Estudiar duplicados implicitos por año y mes
- Estudiar algunos casos específicos de duplicados implícitos y analizar qué podría estar pasando.
- Eliminar duplicados implicitos
- Volver a graficar serie de tiempo

```{python}
#| include: true
# 
```

```{python}

# Estudiar duplicados implicitos por año y mes

df_fifa.duplicated(subset=['year','month','country']).sum()

```

```{python}

df_fifa[df_fifa.duplicated(subset=['year','month','country'])].sample(10)

```
```{python}
df_fifa.query("year == 2010 and month == 3 and country == 'Liberia'")

```


```{python}

# Eliminar duplicados implicitos

df_fifa = df_fifa.drop_duplicates(subset=['year','month','country']).reset_index(drop=True)

```

```{python}

# Volver a graficar serie de tiempo

df_grupos_meses = df_fifa.groupby(['year','month'])['country'].count()

df_grupos_meses.plot(
    kind="line",
    xlabel="Año, Mes",
    ylabel="# Paises",
    title="Cantidad de Paises Calificados"
)

```

## E4: Crear puntuacion unificada

- Crear nueva variable points que junte las columnas de puntos antiguos y nuevos
- Quitar variables de puntuacion antigua y nueva

```{python}
#| include: true
# 
```


```{python}

# Crear nueva variable points

df_fifa.loc[df_fifa['points_old_version'].isna(), 'points'] = df_fifa['points_new_version']

df_fifa.loc[df_fifa['points_new_version'].isna(), 'points'] = df_fifa['points_old_version']

```

```{python}

df_fifa.sample(10)

```

```{python}

# Quitar variables de puntuacion antigua

df_fifa.drop(columns=['points_old_version','points_new_version'],inplace=True)

```

```{python}

df_fifa.sample(10)

```

```{python}

df_fifa.info()

```
